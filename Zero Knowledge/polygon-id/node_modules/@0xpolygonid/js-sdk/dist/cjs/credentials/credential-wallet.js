"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isGenesisStateId = exports.isIssuerGenesis = exports.CredentialWallet = void 0;
const js_iden3_core_1 = require("@iden3/js-iden3-core");
const axios_1 = __importDefault(require("axios"));
const verifiable_1 = require("./../verifiable");
const uuid = __importStar(require("uuid"));
const revocation_1 = require("./revocation");
const js_merkletree_1 = require("@iden3/js-merkletree");
// ErrAllClaimsRevoked all claims are revoked.
const ErrAllClaimsRevoked = 'all claims are revoked';
/**
 *
 * Wallet instance is a wrapper of CRUD logic for W3C credentials,
 * also it allows to fetch revocation statuses.
 *
 * @export
 * @beta
 * @class CredentialWallet
 * @implements implements ICredentialWallet interface
 */
class CredentialWallet {
    /**
     * Creates an instance of CredentialWallet.
     * @param {IDataStorage} _storage - - data storage to access credential / identity / Merkle tree data
     */
    constructor(_storage) {
        this._storage = _storage;
        /**
         * {@inheritDoc ICredentialWallet.createCredential}
         */
        this.createCredential = (hostUrl, issuer, request, schema, rhsUrl) => {
            if (!schema.$metadata.uris['jsonLdContext']) {
                throw new Error('jsonLdContext is missing is the schema');
            }
            const context = [
                verifiable_1.VerifiableConstants.JSONLD_SCHEMA.W3C_CREDENTIAL_2018,
                verifiable_1.VerifiableConstants.JSONLD_SCHEMA.IDEN3_CREDENTIAL,
                schema.$metadata.uris['jsonLdContext']
            ];
            const credentialType = [verifiable_1.VerifiableConstants.CREDENTIAL_TYPE.W3C_VERIFIABLE, request.type];
            const expirationDate = !request.expiration || request.expiration == 0 ? null : request.expiration;
            const issuerDID = issuer.toString();
            const credentialSubject = request.credentialSubject;
            credentialSubject['type'] = request.type;
            const cr = new verifiable_1.W3CCredential();
            cr.id = `${hostUrl}/${uuid.v4()}`;
            cr['@context'] = context;
            cr.type = credentialType;
            cr.expirationDate = expirationDate ? new Date(expirationDate * 1000).toISOString() : undefined;
            cr.issuanceDate = new Date().toISOString();
            cr.credentialSubject = credentialSubject;
            cr.issuer = issuerDID.toString();
            cr.credentialSchema = {
                id: request.credentialSchema,
                type: verifiable_1.VerifiableConstants.JSON_SCHEMA_VALIDATOR
            };
            if (rhsUrl) {
                cr.credentialStatus = {
                    id: `${rhsUrl}`,
                    revocationNonce: request.revNonce,
                    type: verifiable_1.CredentialStatusType.Iden3ReverseSparseMerkleTreeProof
                };
            }
            else {
                cr.credentialStatus = {
                    id: `${hostUrl}/revocation/${request.revNonce}`,
                    revocationNonce: request.revNonce,
                    type: verifiable_1.CredentialStatusType.SparseMerkleTreeProof
                };
            }
            return cr;
        };
    }
    /**
     * {@inheritDoc ICredentialWallet.getAuthBJJCredential}
     */
    async getAuthBJJCredential(did) {
        // filter where the issuer of auth credential is given did
        const authBJJCredsOfIssuer = await this._storage.credential.findCredentialsByQuery({
            context: verifiable_1.VerifiableConstants.AUTH.AUTH_BJJ_CREDENTIAL_SCHEMA_JSONLD_URL,
            type: verifiable_1.VerifiableConstants.AUTH.AUTH_BJJ_CREDENTIAL_TYPE,
            allowedIssuers: [did.toString()]
        });
        if (!authBJJCredsOfIssuer.length) {
            throw new Error('no auth credentials found');
        }
        for (let index = 0; index < authBJJCredsOfIssuer.length; index++) {
            const authCred = authBJJCredsOfIssuer[index];
            const revocationStatus = await this.getRevocationStatusFromCredential(authCred);
            if (!revocationStatus.mtp.existence) {
                return authCred;
            }
        }
        throw new Error('all auth bjj credentials are revoked');
    }
    /**
     * {@inheritDoc ICredentialWallet.getRevocationStatusFromCredential}
     */
    async getRevocationStatusFromCredential(cred) {
        const mtpProof = cred.getIden3SparseMerkleTreeProof();
        const sigProof = cred.getBJJSignature2021Proof();
        const issuerData = mtpProof
            ? mtpProof.issuerData
            : sigProof?.issuerData;
        if (!issuerData) {
            throw new Error('no sig / mtp proof to check issuer info');
        }
        const issuerDID = js_iden3_core_1.DID.parse(cred.issuer);
        return await this.getRevocationStatus(cred.credentialStatus, issuerDID, issuerData);
    }
    /**
     * {@inheritDoc ICredentialWallet.getRevocationStatus}
     */
    async getRevocationStatus(credStatus, issuerDID, issuerData) {
        if (credStatus.type === verifiable_1.CredentialStatusType.SparseMerkleTreeProof) {
            const revStatusDTO = (await axios_1.default.get(credStatus.id)).data;
            return Object.assign(new revocation_1.RevocationStatusDTO(), revStatusDTO).toRevocationStatus();
        }
        if (credStatus.type === verifiable_1.CredentialStatusType.Iden3ReverseSparseMerkleTreeProof) {
            try {
                return await (0, revocation_1.getStatusFromRHS)(issuerDID, credStatus, this._storage.states);
            }
            catch (e) {
                const errMsg = e['reason'] ?? e.message;
                if (errMsg.includes(verifiable_1.VerifiableConstants.ERRORS.IDENTITY_DOES_NOT_EXIST) &&
                    isIssuerGenesis(issuerDID.toString(), issuerData.state.value)) {
                    return {
                        mtp: new js_merkletree_1.Proof(),
                        issuer: {
                            state: issuerData.state.value,
                            revocationTreeRoot: issuerData.state.revocationTreeRoot,
                            rootOfRoots: issuerData.state.rootOfRoots,
                            claimsTreeRoot: issuerData.state.claimsTreeRoot
                        }
                    };
                }
                const status = credStatus;
                if (status?.statusIssuer?.type === verifiable_1.CredentialStatusType.SparseMerkleTreeProof) {
                    return (await axios_1.default.get(credStatus.id)).data;
                }
                throw new Error(`can't fetch revocation status`);
            }
        }
        throw new Error('revocation status unknown');
    }
    /**
     * {@inheritDoc ICredentialWallet.findById}
     */
    async findById(id) {
        return this._storage.credential.findCredentialById(id);
    }
    /**
     * {@inheritDoc ICredentialWallet.findByContextType}
     */
    async findByContextType(context, type) {
        return this._storage.credential.findCredentialsByQuery({ context, type });
    }
    /**
     * {@inheritDoc ICredentialWallet.save}
     */
    async save(credential) {
        return this._storage.credential.saveCredential(credential);
    }
    /**
     * {@inheritDoc ICredentialWallet.saveAll}
     */
    async saveAll(credentials) {
        return this._storage.credential.saveAllCredentials(credentials);
    }
    /**
     * {@inheritDoc ICredentialWallet.remove}
     */
    async remove(id) {
        return this._storage.credential.removeCredential(id);
    }
    /**
     * {@inheritDoc ICredentialWallet.list}
     */
    async list() {
        return this._storage.credential.listCredentials();
    }
    /**
     * {@inheritDoc ICredentialWallet.findByQuery}
     */
    async findByQuery(query) {
        return this._storage.credential.findCredentialsByQuery(query);
    }
    /**
     * {@inheritDoc ICredentialWallet.filterByCredentialSubject}
     */
    async filterByCredentialSubject(credentials, subject) {
        return credentials.filter((cred) => {
            return cred.credentialSubject['id'] === subject.toString();
        });
    }
    async findNonRevokedCredential(creds) {
        for (const cred of creds) {
            const revStatus = await this.getRevocationStatusFromCredential(cred);
            if (revStatus.mtp.existence) {
                continue;
            }
            return { cred, revStatus };
        }
        throw new Error(ErrAllClaimsRevoked);
    }
}
exports.CredentialWallet = CredentialWallet;
/**
 * Checks if issuer did is created from given state is genesis
 *
 * @export
 * @param {string} issuer - did (string)
 * @param {string} state  - hex state
 * @returns boolean
 */
function isIssuerGenesis(issuer, state) {
    const did = js_iden3_core_1.DID.parse(issuer);
    const arr = js_iden3_core_1.BytesHelper.hexToBytes(state);
    const stateBigInt = js_iden3_core_1.BytesHelper.bytesToInt(arr);
    const type = (0, js_iden3_core_1.buildDIDType)(did.method, did.blockchain, did.networkId);
    return isGenesisStateId(did.id.bigInt(), stateBigInt, type);
}
exports.isIssuerGenesis = isIssuerGenesis;
/**
 * Checks if id is created from given state and type is genesis
 *
 * @export
 * @param {bigint} id
 * @param {bigint} state
 * @param {Uint8Array} type
 * @returns boolean - returns if id is genesis
 */
function isGenesisStateId(id, state, type) {
    const idFromState = js_iden3_core_1.Id.idGenesisFromIdenState(type, state);
    return id.toString() === idFromState.bigInt().toString();
}
exports.isGenesisStateId = isGenesisStateId;
//# sourceMappingURL=credential-wallet.js.map