"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLoader = exports.IpfsSchemaLoader = exports.HttpSchemaLoader = exports.UniversalSchemaLoader = void 0;
const axios_1 = __importDefault(require("axios"));
const ipfs_http_client_1 = require("ipfs-http-client");
/**
 * loads schemas from ipfs and http sources
 *
 * @export
 * @beta
 * @class UniversalSchemaLoader
 * @implements implements ISchemaLoader interface
 */
class UniversalSchemaLoader {
    constructor(ipfsUrl) {
        this.ipfsUrl = ipfsUrl;
    }
    /**
     * loads schema by URL
     *
     * @param {string} url - schema URL
     * @returns `Promise<Uint8Array>`
     */
    async load(url) {
        const l = getLoader(url, this.ipfsUrl);
        const schemaRes = await l.load(url);
        return schemaRes;
    }
}
exports.UniversalSchemaLoader = UniversalSchemaLoader;
/**
 * loads schemas from http source
 *
 * @export
 * @beta
 * @class HttpSchemaLoader
 * @implements implements ISchemaLoader interface
 */
class HttpSchemaLoader {
    /**
     *
     *
     * @param {string} url - schema URL
     * @returns `Promise<Uint8Array>`
     */
    async load(url) {
        const resp = await axios_1.default.get(url, { responseType: 'arraybuffer' });
        return resp.data;
    }
}
exports.HttpSchemaLoader = HttpSchemaLoader;
/**
 * loads schemas from ipfs source
 *
 * @export
 * @beta
 * @class IpfsSchemaLoader
 * @implements implements ISchemaLoader interface
 */
class IpfsSchemaLoader {
    /**
     * Creates an instance of IpfsSchemaLoader.
     * @param {string} url - host of the ipfs node
     */
    constructor(url) {
        this.url = url;
        this.client = (0, ipfs_http_client_1.create)({ url: this.url });
    }
    /**
     * loads schema from ipfs by its identifier
     *
     * @param {string} url - schema IPFS identifier
     * @returns `Promise<Uint8Array>`
     */
    async load(url) {
        const uri = new URL(url);
        const schemaRes = this.client.cat(uri.host);
        let schemaBytes = Uint8Array.from([]);
        for await (const num of schemaRes) {
            schemaBytes = Uint8Array.from(num);
        }
        return schemaBytes;
    }
}
exports.IpfsSchemaLoader = IpfsSchemaLoader;
/**
 * returns loader for schemas based on the URL protocol
 *
 * @export
 * @param {string} url - schema url
 * @param {string} [ipfsConfigUrl] - ipfs node host url
 * @returns ISchemaLoader
 */
function getLoader(url, ipfsConfigUrl) {
    const uri = new URL(url);
    switch (uri.protocol) {
        case 'http:':
        case 'https:':
            return new HttpSchemaLoader();
        case 'ipfs:':
            return new IpfsSchemaLoader(ipfsConfigUrl);
        default:
            throw new Error(`loader for ${uri.protocol} is not supported`);
    }
}
exports.getLoader = getLoader;
//# sourceMappingURL=schema.js.map