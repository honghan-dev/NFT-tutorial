"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bJJSignatureFromHexString = exports.ProofService = void 0;
const js_merkletree_1 = require("@iden3/js-merkletree");
const models_1 = require("./../circuits/models");
const constants_1 = require("../verifiable/constants");
/* eslint-disable no-console */
const js_iden3_core_1 = require("@iden3/js-iden3-core");
const circuits_1 = require("../circuits");
const common_1 = require("./common");
const prover_1 = require("./prover");
const js_crypto_1 = require("@iden3/js-crypto");
const loaders_1 = require("../loaders");
const schema_processor_1 = require("../schema-processor");
const js_jsonld_merklization_1 = require("@iden3/js-jsonld-merklization");
/**
 * Proof service is an implementation of IProofService
 * that works with a native groth16 prover
 *
 * @export
 * @beta
 * @class ProofService
 * @implements implements IProofService interface
 */
class ProofService {
    /**
     * Creates an instance of ProofService.
     * @param {IIdentityWallet} _identityWallet - identity wallet
     * @param {ICredentialWallet} _credentialWallet - credential wallet
     * @param {ICircuitStorage} _circuitStorage - circuit storage to load proving / verification files
     * @param {IStateStorage} _stateStorage - state storage to get GIST proof / publish state
     */
    constructor(_identityWallet, _credentialWallet, _circuitStorage, _stateStorage) {
        this._identityWallet = _identityWallet;
        this._credentialWallet = _credentialWallet;
        this._circuitStorage = _circuitStorage;
        this._stateStorage = _stateStorage;
        this._prover = new prover_1.NativeProver(_circuitStorage);
    }
    /** {@inheritdoc IProofService.verifyProof} */
    async verifyProof(zkp, circuitId) {
        return this._prover.verify(zkp, circuitId);
    }
    /** {@inheritdoc IProofService.generateProof} */
    async generateProof(proofReq, identifier, credential, opts) {
        if (!opts) {
            opts = {
                authProfileNonce: 0,
                credentialSubjectProfileNonce: 0,
                skipRevocation: false
            };
        }
        const preparedCredential = await this.getPreparedCredential(credential);
        const inputs = await this.generateInputs(preparedCredential, identifier, proofReq, opts);
        const proof = await this._prover.generate(inputs, proofReq.circuitId);
        return { proof, credential: preparedCredential.credential };
    }
    /** {@inheritdoc IProofService.transitState} */
    async transitState(did, oldTreeState, isOldStateGenesis, stateStorage, ethSigner) {
        const authInfo = await this.prepareAuthBJJCredential(did, oldTreeState);
        const newTreeModel = await this._identityWallet.getDIDTreeModel(did);
        const newTreeState = {
            revocationRoot: newTreeModel.revocationTree.root,
            claimsRoot: newTreeModel.claimsTree.root,
            state: newTreeModel.state,
            rootOfRoots: newTreeModel.rootsTree.root
        };
        const challenge = js_crypto_1.Poseidon.hash([oldTreeState.state.bigInt(), newTreeState.state.bigInt()]);
        const signature = await this._identityWallet.signChallenge(challenge, authInfo.authCredential);
        const circuitInputs = new circuits_1.StateTransitionInputs();
        circuitInputs.id = did.id;
        circuitInputs.signature = signature;
        circuitInputs.isOldStateGenesis = isOldStateGenesis;
        const authClaimIncProofNewState = await this._identityWallet.generateCredentialMtp(did, authInfo.authCredential, newTreeState);
        circuitInputs.newTreeState = authClaimIncProofNewState.treeState;
        circuitInputs.authClaimNewStateIncProof = authClaimIncProofNewState.proof;
        circuitInputs.oldTreeState = oldTreeState;
        circuitInputs.authClaim = {
            claim: authInfo.authCoreClaim,
            incProof: authInfo.incProof,
            nonRevProof: authInfo.nonRevProof
        };
        const inputs = circuitInputs.inputsMarshal();
        const proof = await this._prover.generate(inputs, circuits_1.CircuitId.StateTransition);
        const txId = await stateStorage.publishState(proof, ethSigner);
        return txId;
    }
    async getPreparedCredential(credential) {
        const { cred: nonRevokedCred, revStatus } = await this._credentialWallet.findNonRevokedCredential([credential]);
        const credCoreClaim = await this._identityWallet.getCoreClaimFromCredential(nonRevokedCred);
        return { credential: nonRevokedCred, revStatus, credentialCoreClaim: credCoreClaim };
    }
    async prepareAuthBJJCredential(did, treeStateInfo) {
        const authCredential = await this._credentialWallet.getAuthBJJCredential(did);
        const incProof = await this._identityWallet.generateCredentialMtp(did, authCredential, treeStateInfo);
        const nonRevProof = await this._identityWallet.generateNonRevocationMtp(did, authCredential, treeStateInfo);
        const authCoreClaim = authCredential.getCoreClaimFromProof(constants_1.ProofType.Iden3SparseMerkleTreeProof);
        if (!authCoreClaim) {
            throw new Error('auth core claim is not defined for auth bjj credential');
        }
        return { authCredential, incProof, nonRevProof, authCoreClaim };
    }
    async generateInputs(preparedCredential, identifier, proofReq, opts) {
        let inputs;
        if (proofReq.circuitId === circuits_1.CircuitId.AtomicQueryMTPV2) {
            const circuitClaimData = await this.newCircuitClaimData(preparedCredential.credential, preparedCredential.credentialCoreClaim);
            circuitClaimData.nonRevProof = (0, common_1.toClaimNonRevStatus)(preparedCredential.revStatus);
            const circuitInputs = new circuits_1.AtomicQueryMTPV2Inputs();
            circuitInputs.id = identifier.id;
            circuitInputs.requestID = BigInt(proofReq.id);
            circuitInputs.query = await this.toCircuitsQuery(proofReq.query, preparedCredential.credential, preparedCredential.credentialCoreClaim);
            circuitInputs.claim = {
                issuerID: circuitClaimData.issuerId,
                claim: circuitClaimData.claim,
                incProof: { proof: circuitClaimData.proof, treeState: circuitClaimData.treeState },
                nonRevProof: circuitClaimData.nonRevProof
            };
            circuitInputs.currentTimeStamp = (0, js_iden3_core_1.getUnixTimestamp)(new Date());
            circuitInputs.claimSubjectProfileNonce = BigInt(opts.credentialSubjectProfileNonce);
            circuitInputs.profileNonce = BigInt(opts.authProfileNonce);
            circuitInputs.skipClaimRevocationCheck = opts.skipRevocation;
            inputs = circuitInputs.inputsMarshal();
        }
        else if (proofReq.circuitId === circuits_1.CircuitId.AtomicQuerySigV2) {
            const circuitClaimData = await this.newCircuitClaimData(preparedCredential.credential, preparedCredential.credentialCoreClaim);
            circuitClaimData.nonRevProof = (0, common_1.toClaimNonRevStatus)(preparedCredential.revStatus);
            const circuitInputs = new circuits_1.AtomicQuerySigV2Inputs();
            circuitInputs.id = identifier.id;
            circuitInputs.claim = {
                issuerID: circuitClaimData.issuerId,
                signatureProof: circuitClaimData.signatureProof,
                claim: circuitClaimData.claim,
                nonRevProof: circuitClaimData.nonRevProof
            };
            circuitInputs.requestID = BigInt(proofReq.id);
            circuitInputs.claimSubjectProfileNonce = BigInt(opts.credentialSubjectProfileNonce);
            circuitInputs.profileNonce = BigInt(opts.authProfileNonce);
            circuitInputs.skipClaimRevocationCheck = opts.skipRevocation;
            circuitInputs.query = await this.toCircuitsQuery(proofReq.query, preparedCredential.credential, preparedCredential.credentialCoreClaim);
            circuitInputs.currentTimeStamp = (0, js_iden3_core_1.getUnixTimestamp)(new Date());
            inputs = circuitInputs.inputsMarshal();
        }
        else {
            throw new Error(`circuit with id ${proofReq.circuitId} is not supported by issuer`);
        }
        return inputs;
    }
    // NewCircuitClaimData generates circuits claim structure
    async newCircuitClaimData(credential, coreClaim) {
        const smtProof = credential.getIden3SparseMerkleTreeProof();
        const circuitClaim = new circuits_1.CircuitClaim();
        circuitClaim.claim = coreClaim;
        circuitClaim.issuerId = js_iden3_core_1.DID.parse(credential.issuer).id;
        if (smtProof) {
            circuitClaim.proof = smtProof.mtp;
            circuitClaim.treeState = {
                state: (0, circuits_1.strMTHex)(smtProof.issuerData.state?.value),
                claimsRoot: (0, circuits_1.strMTHex)(smtProof.issuerData.state?.claimsTreeRoot),
                revocationRoot: (0, circuits_1.strMTHex)(smtProof.issuerData.state?.revocationTreeRoot),
                rootOfRoots: (0, circuits_1.strMTHex)(smtProof.issuerData.state?.rootOfRoots)
            };
        }
        const sigProof = credential.getBJJSignature2021Proof();
        if (sigProof) {
            const signature = await (0, exports.bJJSignatureFromHexString)(sigProof.signature);
            const rs = await this._credentialWallet.getRevocationStatus(sigProof.issuerData.credentialStatus, js_iden3_core_1.DID.parse(sigProof.issuerData.id), sigProof.issuerData);
            //todo: check if this is correct
            const issuerAuthNonRevProof = {
                treeState: {
                    state: (0, circuits_1.strMTHex)(rs.issuer.state),
                    claimsRoot: (0, circuits_1.strMTHex)(rs.issuer.claimsTreeRoot),
                    revocationRoot: (0, circuits_1.strMTHex)(rs.issuer.revocationTreeRoot),
                    rootOfRoots: (0, circuits_1.strMTHex)(rs.issuer.rootOfRoots)
                },
                proof: rs.mtp
            };
            if (!sigProof.issuerData.mtp) {
                throw new Error('issuer auth credential must have a mtp proof');
            }
            if (!sigProof.issuerData.authCoreClaim) {
                throw new Error('issuer auth credential must have a core claim proof');
            }
            circuitClaim.signatureProof = {
                signature,
                issuerAuthIncProof: {
                    proof: sigProof.issuerData.mtp,
                    treeState: {
                        state: (0, circuits_1.strMTHex)(sigProof.issuerData.state?.value),
                        claimsRoot: (0, circuits_1.strMTHex)(sigProof.issuerData.state?.claimsTreeRoot),
                        revocationRoot: (0, circuits_1.strMTHex)(sigProof.issuerData.state?.revocationTreeRoot),
                        rootOfRoots: (0, circuits_1.strMTHex)(sigProof.issuerData.state?.rootOfRoots)
                    }
                },
                issuerAuthClaim: new js_iden3_core_1.Claim().fromHex(sigProof.issuerData.authCoreClaim),
                issuerAuthNonRevProof
            };
        }
        return circuitClaim;
    }
    async toCircuitsQuery(query, credential, coreClaim) {
        const mtPosition = coreClaim.getMerklizedPosition();
        if (mtPosition === js_iden3_core_1.MerklizedRootPosition.None) {
            return this.prepareNonMerklizedQuery(query, credential);
        }
        return this.prepareMerklizedQuery(query, credential, mtPosition);
    }
    async prepareMerklizedQuery(query, credential, merklizedPosition) {
        const parsedQuery = await this.parseRequest(query.credentialSubject);
        const loader = new loaders_1.UniversalSchemaLoader('ipfs.io');
        const schema = await loader.load(credential['@context'][2]);
        let path = new js_jsonld_merklization_1.Path();
        if (parsedQuery.query.operator !== circuits_1.QueryOperators.$noop) {
            path = await js_jsonld_merklization_1.Path.getContextPathKey(new TextDecoder().decode(schema), credential.type[1], parsedQuery.fieldName);
        }
        path.prepend(['https://www.w3.org/2018/credentials#credentialSubject']);
        const mk = await credential.merklize();
        const { proof, value: mtValue } = await mk.proof(path);
        const pathKey = await path.mtEntry();
        parsedQuery.query.valueProof = new models_1.ValueProof();
        parsedQuery.query.valueProof.mtp = proof;
        parsedQuery.query.valueProof.path = pathKey;
        parsedQuery.query.valueProof.mtp = proof;
        parsedQuery.query.valueProof.value = BigInt(await mtValue.mtEntry());
        if (merklizedPosition == js_iden3_core_1.MerklizedRootPosition.Index) {
            parsedQuery.query.slotIndex = 2; // value data slot a
        }
        else {
            parsedQuery.query.slotIndex = 5; // value data slot b
        }
        return parsedQuery.query;
    }
    async prepareNonMerklizedQuery(query, credential) {
        const loader = new loaders_1.UniversalSchemaLoader('ipfs.io');
        const schema = await loader.load(credential.credentialSchema.id);
        if (query.credentialSubject && Object.keys(query.credentialSubject).length > 1) {
            throw new Error('multiple requests are not supported');
        }
        const parsedQuery = await this.parseRequest(query.credentialSubject);
        parsedQuery.query.slotIndex = new schema_processor_1.Parser().getFieldSlotIndex(parsedQuery.fieldName, schema);
        return parsedQuery.query;
    }
    async parseRequest(req) {
        if (!req) {
            const query = new circuits_1.Query();
            query.operator = circuits_1.QueryOperators.$noop;
            return { query, fieldName: '' };
        }
        let fieldName = '';
        let fieldReq = new Map();
        if (Object.keys(req).length > 1) {
            throw new Error(`multiple requests  not supported`);
        }
        for (const [key, value] of Object.entries(req)) {
            fieldName = key;
            fieldReq = value;
            if (Object.keys(fieldReq).length > 1) {
                throw new Error(`multiple predicates for one field not supported`);
            }
            break;
        }
        let operator = 0;
        const values = new Array(64).fill(BigInt(0));
        for (const [key, value] of Object.entries(fieldReq)) {
            if (!circuits_1.QueryOperators[key]) {
                throw new Error(`operator is not supported by lib`);
            }
            operator = circuits_1.QueryOperators[key];
            if (Array.isArray(value)) {
                for (let index = 0; index < value.length; index++) {
                    values[index] = BigInt(value[index]);
                }
            }
            else {
                values[0] = BigInt(value);
            }
            break;
        }
        const query = new circuits_1.Query();
        query.operator = operator;
        query.values = values;
        return { query, fieldName };
    }
    /** {@inheritdoc IProofService.generateAuthV2Inputs} */
    async generateAuthV2Inputs(hash, did, profileNonce, circuitId) {
        if (circuitId !== circuits_1.CircuitId.AuthV2) {
            throw new Error('CircuitId is not supported');
        }
        // todo: check if bigint is correct
        const challenge = js_iden3_core_1.BytesHelper.bytesToInt(hash.reverse());
        const authPrepared = await this.prepareAuthBJJCredential(did);
        const authClaimData = await this.newCircuitClaimData(authPrepared.authCredential, authPrepared.authCoreClaim);
        const signature = await this._identityWallet.signChallenge(challenge, authPrepared.authCredential);
        const id = did.id;
        const stateProof = await this._stateStorage.getGISTProof(id.bigInt());
        const gistProof = (0, common_1.toGISTProof)(stateProof);
        const authInputs = new circuits_1.AuthV2Inputs();
        authInputs.genesisID = id;
        authInputs.profileNonce = BigInt(profileNonce);
        authInputs.authClaim = authClaimData.claim;
        authInputs.authClaimIncMtp = authClaimData.proof;
        authInputs.authClaimNonRevMtp = authPrepared.nonRevProof.proof;
        authInputs.treeState = authClaimData.treeState;
        authInputs.signature = signature;
        authInputs.challenge = challenge;
        authInputs.gistProof = gistProof;
        return authInputs.inputsMarshal();
    }
    async verifyState(circuitId, pubSignals) {
        if (circuitId !== circuits_1.CircuitId.AuthV2) {
            throw new Error(`CircuitId is not supported ${circuitId}`);
        }
        const gistRoot = (0, js_merkletree_1.newHashFromString)(pubSignals[2]).bigInt();
        const globalStateInfo = await this._stateStorage.getGISTRootInfo(gistRoot);
        if (globalStateInfo.createdAtTimestamp === 0n) {
            throw new Error(`gist state doesn't exists in contract`);
        }
        if (globalStateInfo.root !== gistRoot) {
            throw new Error(`gist info contains invalid state`);
        }
        if (globalStateInfo.replacedByRoot !== 0n) {
            if (globalStateInfo.replacedAtTimestamp === 0n) {
                throw new Error(`state was replaced, but replaced time unknown`);
            }
            return false;
        }
        return true;
    }
}
exports.ProofService = ProofService;
// BJJSignatureFromHexString converts hex to  babyjub.Signature
const bJJSignatureFromHexString = async (sigHex) => {
    const signatureBytes = js_crypto_1.Hex.decodeString(sigHex);
    const compressedSig = Uint8Array.from(signatureBytes).slice(0, 64);
    const bjjSig = js_crypto_1.Signature.newFromCompressed(compressedSig);
    return bjjSig;
};
exports.bJJSignatureFromHexString = bJJSignatureFromHexString;
//# sourceMappingURL=proof-service.js.map