import { buildDIDType, BytesHelper, DID, Id } from '@iden3/js-iden3-core';
import axios from 'axios';
import { W3CCredential, VerifiableConstants, CredentialStatusType } from './../verifiable';
import * as uuid from 'uuid';
import { getStatusFromRHS, RevocationStatusDTO } from './revocation';
import { Proof } from '@iden3/js-merkletree';
// ErrAllClaimsRevoked all claims are revoked.
const ErrAllClaimsRevoked = 'all claims are revoked';
/**
 *
 * Wallet instance is a wrapper of CRUD logic for W3C credentials,
 * also it allows to fetch revocation statuses.
 *
 * @export
 * @beta
 * @class CredentialWallet
 * @implements implements ICredentialWallet interface
 */
export class CredentialWallet {
    /**
     * Creates an instance of CredentialWallet.
     * @param {IDataStorage} _storage - - data storage to access credential / identity / Merkle tree data
     */
    constructor(_storage) {
        this._storage = _storage;
        /**
         * {@inheritDoc ICredentialWallet.createCredential}
         */
        this.createCredential = (hostUrl, issuer, request, schema, rhsUrl) => {
            if (!schema.$metadata.uris['jsonLdContext']) {
                throw new Error('jsonLdContext is missing is the schema');
            }
            const context = [
                VerifiableConstants.JSONLD_SCHEMA.W3C_CREDENTIAL_2018,
                VerifiableConstants.JSONLD_SCHEMA.IDEN3_CREDENTIAL,
                schema.$metadata.uris['jsonLdContext']
            ];
            const credentialType = [VerifiableConstants.CREDENTIAL_TYPE.W3C_VERIFIABLE, request.type];
            const expirationDate = !request.expiration || request.expiration == 0 ? null : request.expiration;
            const issuerDID = issuer.toString();
            const credentialSubject = request.credentialSubject;
            credentialSubject['type'] = request.type;
            const cr = new W3CCredential();
            cr.id = `${hostUrl}/${uuid.v4()}`;
            cr['@context'] = context;
            cr.type = credentialType;
            cr.expirationDate = expirationDate ? new Date(expirationDate * 1000).toISOString() : undefined;
            cr.issuanceDate = new Date().toISOString();
            cr.credentialSubject = credentialSubject;
            cr.issuer = issuerDID.toString();
            cr.credentialSchema = {
                id: request.credentialSchema,
                type: VerifiableConstants.JSON_SCHEMA_VALIDATOR
            };
            if (rhsUrl) {
                cr.credentialStatus = {
                    id: `${rhsUrl}`,
                    revocationNonce: request.revNonce,
                    type: CredentialStatusType.Iden3ReverseSparseMerkleTreeProof
                };
            }
            else {
                cr.credentialStatus = {
                    id: `${hostUrl}/revocation/${request.revNonce}`,
                    revocationNonce: request.revNonce,
                    type: CredentialStatusType.SparseMerkleTreeProof
                };
            }
            return cr;
        };
    }
    /**
     * {@inheritDoc ICredentialWallet.getAuthBJJCredential}
     */
    async getAuthBJJCredential(did) {
        // filter where the issuer of auth credential is given did
        const authBJJCredsOfIssuer = await this._storage.credential.findCredentialsByQuery({
            context: VerifiableConstants.AUTH.AUTH_BJJ_CREDENTIAL_SCHEMA_JSONLD_URL,
            type: VerifiableConstants.AUTH.AUTH_BJJ_CREDENTIAL_TYPE,
            allowedIssuers: [did.toString()]
        });
        if (!authBJJCredsOfIssuer.length) {
            throw new Error('no auth credentials found');
        }
        for (let index = 0; index < authBJJCredsOfIssuer.length; index++) {
            const authCred = authBJJCredsOfIssuer[index];
            const revocationStatus = await this.getRevocationStatusFromCredential(authCred);
            if (!revocationStatus.mtp.existence) {
                return authCred;
            }
        }
        throw new Error('all auth bjj credentials are revoked');
    }
    /**
     * {@inheritDoc ICredentialWallet.getRevocationStatusFromCredential}
     */
    async getRevocationStatusFromCredential(cred) {
        const mtpProof = cred.getIden3SparseMerkleTreeProof();
        const sigProof = cred.getBJJSignature2021Proof();
        const issuerData = mtpProof
            ? mtpProof.issuerData
            : sigProof?.issuerData;
        if (!issuerData) {
            throw new Error('no sig / mtp proof to check issuer info');
        }
        const issuerDID = DID.parse(cred.issuer);
        return await this.getRevocationStatus(cred.credentialStatus, issuerDID, issuerData);
    }
    /**
     * {@inheritDoc ICredentialWallet.getRevocationStatus}
     */
    async getRevocationStatus(credStatus, issuerDID, issuerData) {
        if (credStatus.type === CredentialStatusType.SparseMerkleTreeProof) {
            const revStatusDTO = (await axios.get(credStatus.id)).data;
            return Object.assign(new RevocationStatusDTO(), revStatusDTO).toRevocationStatus();
        }
        if (credStatus.type === CredentialStatusType.Iden3ReverseSparseMerkleTreeProof) {
            try {
                return await getStatusFromRHS(issuerDID, credStatus, this._storage.states);
            }
            catch (e) {
                const errMsg = e['reason'] ?? e.message;
                if (errMsg.includes(VerifiableConstants.ERRORS.IDENTITY_DOES_NOT_EXIST) &&
                    isIssuerGenesis(issuerDID.toString(), issuerData.state.value)) {
                    return {
                        mtp: new Proof(),
                        issuer: {
                            state: issuerData.state.value,
                            revocationTreeRoot: issuerData.state.revocationTreeRoot,
                            rootOfRoots: issuerData.state.rootOfRoots,
                            claimsTreeRoot: issuerData.state.claimsTreeRoot
                        }
                    };
                }
                const status = credStatus;
                if (status?.statusIssuer?.type === CredentialStatusType.SparseMerkleTreeProof) {
                    return (await axios.get(credStatus.id)).data;
                }
                throw new Error(`can't fetch revocation status`);
            }
        }
        throw new Error('revocation status unknown');
    }
    /**
     * {@inheritDoc ICredentialWallet.findById}
     */
    async findById(id) {
        return this._storage.credential.findCredentialById(id);
    }
    /**
     * {@inheritDoc ICredentialWallet.findByContextType}
     */
    async findByContextType(context, type) {
        return this._storage.credential.findCredentialsByQuery({ context, type });
    }
    /**
     * {@inheritDoc ICredentialWallet.save}
     */
    async save(credential) {
        return this._storage.credential.saveCredential(credential);
    }
    /**
     * {@inheritDoc ICredentialWallet.saveAll}
     */
    async saveAll(credentials) {
        return this._storage.credential.saveAllCredentials(credentials);
    }
    /**
     * {@inheritDoc ICredentialWallet.remove}
     */
    async remove(id) {
        return this._storage.credential.removeCredential(id);
    }
    /**
     * {@inheritDoc ICredentialWallet.list}
     */
    async list() {
        return this._storage.credential.listCredentials();
    }
    /**
     * {@inheritDoc ICredentialWallet.findByQuery}
     */
    async findByQuery(query) {
        return this._storage.credential.findCredentialsByQuery(query);
    }
    /**
     * {@inheritDoc ICredentialWallet.filterByCredentialSubject}
     */
    async filterByCredentialSubject(credentials, subject) {
        return credentials.filter((cred) => {
            return cred.credentialSubject['id'] === subject.toString();
        });
    }
    async findNonRevokedCredential(creds) {
        for (const cred of creds) {
            const revStatus = await this.getRevocationStatusFromCredential(cred);
            if (revStatus.mtp.existence) {
                continue;
            }
            return { cred, revStatus };
        }
        throw new Error(ErrAllClaimsRevoked);
    }
}
/**
 * Checks if issuer did is created from given state is genesis
 *
 * @export
 * @param {string} issuer - did (string)
 * @param {string} state  - hex state
 * @returns boolean
 */
export function isIssuerGenesis(issuer, state) {
    const did = DID.parse(issuer);
    const arr = BytesHelper.hexToBytes(state);
    const stateBigInt = BytesHelper.bytesToInt(arr);
    const type = buildDIDType(did.method, did.blockchain, did.networkId);
    return isGenesisStateId(did.id.bigInt(), stateBigInt, type);
}
/**
 * Checks if id is created from given state and type is genesis
 *
 * @export
 * @param {bigint} id
 * @param {bigint} state
 * @param {Uint8Array} type
 * @returns boolean - returns if id is genesis
 */
export function isGenesisStateId(id, state, type) {
    const idFromState = Id.idGenesisFromIdenState(type, state);
    return id.toString() === idFromState.bigInt().toString();
}
//# sourceMappingURL=credential-wallet.js.map