/**
 * Loader interface to load schema
 *
 * @export
 * @beta
 * @interface   ISchemaLoader
 */
export interface ISchemaLoader {
    /**
     * loads schema by its url
     *
     * @param {string} url
     * @returns `Promise<Uint8Array>`
     */
    load(url: string): Promise<Uint8Array>;
}
/**
 * loads schemas from ipfs and http sources
 *
 * @export
 * @beta
 * @class UniversalSchemaLoader
 * @implements implements ISchemaLoader interface
 */
export declare class UniversalSchemaLoader implements ISchemaLoader {
    private ipfsUrl;
    constructor(ipfsUrl: string);
    /**
     * loads schema by URL
     *
     * @param {string} url - schema URL
     * @returns `Promise<Uint8Array>`
     */
    load(url: string): Promise<Uint8Array>;
}
/**
 * loads schemas from http source
 *
 * @export
 * @beta
 * @class HttpSchemaLoader
 * @implements implements ISchemaLoader interface
 */
export declare class HttpSchemaLoader implements ISchemaLoader {
    /**
     *
     *
     * @param {string} url - schema URL
     * @returns `Promise<Uint8Array>`
     */
    load(url: string): Promise<Uint8Array>;
}
/**
 * loads schemas from ipfs source
 *
 * @export
 * @beta
 * @class IpfsSchemaLoader
 * @implements implements ISchemaLoader interface
 */
export declare class IpfsSchemaLoader implements ISchemaLoader {
    private readonly url;
    private readonly client;
    /**
     * Creates an instance of IpfsSchemaLoader.
     * @param {string} url - host of the ipfs node
     */
    constructor(url: string);
    /**
     * loads schema from ipfs by its identifier
     *
     * @param {string} url - schema IPFS identifier
     * @returns `Promise<Uint8Array>`
     */
    load(url: string): Promise<Uint8Array>;
}
/**
 * returns loader for schemas based on the URL protocol
 *
 * @export
 * @param {string} url - schema url
 * @param {string} [ipfsConfigUrl] - ipfs node host url
 * @returns ISchemaLoader
 */
export declare function getLoader(url: string, ipfsConfigUrl?: string): ISchemaLoader;
