import { Hash, Merkletree } from '@iden3/js-merkletree';
import { IStateStorage } from '../storage/interfaces';
import { DID } from '@iden3/js-iden3-core';
import { CredentialStatus, Issuer, RevocationStatus, RHSCredentialStatus } from '../verifiable';
/**
 * Interface to unite contains three trees: claim, revocation and rootOfRoots
 * Also contains the current state of identity
 * @export
 * @beta
 * @interface TreesModel
 */
export interface TreesModel {
    claimsTree: Merkletree;
    revocationTree: Merkletree;
    rootsTree: Merkletree;
    state: Hash;
}
declare enum NodeType {
    Unknown = 0,
    Middle = 1,
    Leaf = 2,
    State = 3
}
/**
 * ProofNode is a partial Reverse Hash Service result
 * it contains the current node hash and its children
 *
 * @export
 * @beta
 * @class ProofNode
 */
export declare class ProofNode {
    hash: Hash;
    children: Hash[];
    /**
     *
     * Creates an instance of ProofNode.
     * @param {Hash} [hash=ZERO_HASH] - current node hash
     * @param {Hash[]} [children=[]] -  children of the node
     */
    constructor(hash?: Hash, children?: Hash[]);
    /**
     * Determination of Node type
     * Can be: Leaf, Middle or State node
     *
     * @returns NodeType
     */
    nodeType(): NodeType;
    /**
     * JSON Representation of ProofNode with a hex values
     *
     * @returns {*} - ProofNode with hexes
     */
    toJSON(): {
        hash: string;
        children: string[];
    };
    /**
     * Creates ProofNode Hashes from hex values
     *
     * @static
     * @param {ProofNodeHex} hexNode
     * @returns ProofNode
     */
    static fromHex(hexNode: ProofNodeHex): ProofNode;
}
interface ProofNodeHex {
    hash: string;
    children: string[];
}
/**
 *
 * Fetches and Builds a revocation status for a given credential
 * Supported types for credentialStatus field: SparseMerkleTreeProof, Iden3ReverseSparseMerkleTreeProof
 *
 * @export
 * @param {DID} issuer - issuer identity
 * @param {(CredentialStatus | RHSCredentialStatus)} credStatus - credentialStatus field from the W3C verifiable credential
 * @param {IStateStorage} stateStorage - storage to fetch current issuer status
 * @returns Promise<RevocationStatus>
 */
export declare function getStatusFromRHS(issuer: DID, credStatus: CredentialStatus | RHSCredentialStatus, stateStorage: IStateStorage): Promise<RevocationStatus>;
/**
 * Pushes identity state information to a reverse hash service.
 *
 * A reverse hash service (RHS) is a centralized or decentralized service for storing publicly available data about identity.
 * Such data are identity state and state of revocation tree and roots tree root tree.
 *
 * @export
 * @param {Hash} state - current state of identity
 * @param {TreesModel} trees - current trees of identity (claims, revocation, rootOfRoots )
 * @param {string} rhsUrl - URL of service
 * @param {number[]} [revokedNonces] - revoked nonces since last published info
 * @returns void
 */
export declare function pushHashesToRHS(state: Hash, trees: TreesModel, rhsUrl: string, revokedNonces?: number[]): Promise<void>;
/**
 *  Proof dto as a partial result of fetching credential status with type SparseMerkleTreeProof
 *
 * @export
 * @class ProofDTO
 */
export declare class ProofDTO {
    existence: boolean;
    siblings: string[];
    node_aux: {
        key: string;
        value: string;
    };
}
/**
 * RevocationStatusDTO is a result of fetching credential status with type SparseMerkleTreeProof
 *
 * @beta
 * @export
 * @class RevocationStatusDTO
 */
export declare class RevocationStatusDTO {
    issuer: Issuer;
    mtp: ProofDTO;
    toRevocationStatus(): RevocationStatus;
}
export {};
